#!/bin/bash

# üîê SCRIPT DE VERIFICACI√ìN DE PROTECCI√ìN CSRF
# Verifica la implementaci√≥n completa de protecci√≥n contra CSRF

set -e

echo "üîç Verificando implementaci√≥n de protecci√≥n CSRF..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para logging
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar archivos de protecci√≥n CSRF
log_info "Verificando archivos de protecci√≥n CSRF..."

CSRF_FILES=(
    "packages/security/src/csrf-protection.js"
    "packages/security/src/express-security-with-csrf.js"
    "packages/security/src/useCSRF.tsx"
)

for file in "${CSRF_FILES[@]}"; do
    if [[ -f "$file" ]]; then
        log_success "Archivo encontrado: $file"
    else
        log_error "Archivo faltante: $file"
        exit 1
    fi
done

# Verificar funcionalidades CSRF en backend
log_info "Verificando funcionalidades CSRF en backend..."

CSRF_BACKEND_FEATURES=(
    "generateCSRFToken"
    "validateCSRFToken"
    "csrfTokenGeneration"
    "csrfTokenValidation"
    "authCSRFProtection"
    "setupCSRFProtection"
)

CSRF_BACKEND_FILE="packages/security/src/csrf-protection.js"
for feature in "${CSRF_BACKEND_FEATURES[@]}"; do
    if grep -q "$feature" "$CSRF_BACKEND_FILE"; then
        log_success "Funci√≥n backend encontrada: $feature"
    else
        log_error "Funci√≥n backend faltante: $feature"
    fi
done

# Verificar middleware Express con CSRF
log_info "Verificando middleware Express con CSRF..."

EXPRESS_CSRF_FILE="packages/security/src/express-security-with-csrf.js"
EXPRESS_CSRF_FEATURES=(
    "setupCSRFProtection"
    "X-CSRF-Token"
    "X-Session-ID"
    "csrf.*protection_enabled"
)

for feature in "${EXPRESS_CSRF_FEATURES[@]}"; do
    if grep -q "$feature" "$EXPRESS_CSRF_FILE"; then
        log_success "Feature Express CSRF encontrado: $feature"
    else
        log_warning "Feature Express CSRF podr√≠a estar faltante: $feature"
    fi
done

# Verificar hooks React para CSRF
log_info "Verificando hooks React para CSRF..."

REACT_CSRF_FILE="packages/security/src/useCSRF.tsx"
REACT_CSRF_FEATURES=(
    "useCSRF"
    "useSecureFetch"
    "CSRFProvider"
    "X-CSRF-Token"
    "/api/csrf-token"
)

for feature in "${REACT_CSRF_FEATURES[@]}"; do
    if grep -q "$feature" "$REACT_CSRF_FILE"; then
        log_success "Feature React CSRF encontrado: $feature"
    else
        log_error "Feature React CSRF faltante: $feature"
    fi
done

# Verificar sintaxis JavaScript
log_info "Verificando sintaxis de archivos JavaScript..."

JS_FILES=(
    "packages/security/src/csrf-protection.js"
    "packages/security/src/express-security-with-csrf.js"
)

for file in "${JS_FILES[@]}"; do
    if node -c "$file" 2>/dev/null; then
        log_success "Sintaxis JavaScript v√°lida: $file"
    else
        log_error "Error de sintaxis en: $file"
        node -c "$file"
    fi
done

# Verificar configuraci√≥n de endpoints CSRF
log_info "Verificando endpoints CSRF..."

CSRF_ENDPOINTS=(
    "/api/csrf-token"
    "/api/auth/login.*CSRF"
    "/api/auth/register.*CSRF"
)

for endpoint in "${CSRF_ENDPOINTS[@]}"; do
    if grep -q "$endpoint" "$CSRF_BACKEND_FILE" || grep -q "$endpoint" "$EXPRESS_CSRF_FILE"; then
        log_success "Endpoint CSRF configurado: $endpoint"
    else
        log_warning "Endpoint CSRF podr√≠a necesitar configuraci√≥n: $endpoint"
    fi
done

# Verificar headers de seguridad CSRF
log_info "Verificando headers de seguridad CSRF..."

CSRF_HEADERS=(
    "X-CSRF-Token"
    "X-Session-ID"
    "X-CSRF-Protection"
)

for header in "${CSRF_HEADERS[@]}"; do
    if grep -q "$header" "$EXPRESS_CSRF_FILE"; then
        log_success "Header CSRF configurado: $header"
    else
        log_warning "Header CSRF podr√≠a estar faltante: $header"
    fi
done

# Verificar que no hay tokens hardcodeados
log_info "Verificando que no hay tokens CSRF hardcodeados..."

TOKEN_PATTERNS=(
    "[a-f0-9]{32,64}"  # Tokens hexadecimales largos
    "csrf.*['\"][a-zA-Z0-9]{20,}['\"]"
)

TOKENS_FOUND=false
for pattern in "${TOKEN_PATTERNS[@]}"; do
    for file in "${CSRF_FILES[@]}"; do
        if grep -E "$pattern" "$file" >/dev/null 2>&1; then
            # Verificar que no sean ejemplos o placeholders
            if ! grep -E "(example|placeholder|demo)" "$file" >/dev/null 2>&1; then
                log_warning "Posible token hardcodeado encontrado en $file"
                TOKENS_FOUND=true
            fi
        fi
    done
done

if ! $TOKENS_FOUND; then
    log_success "No se encontraron tokens CSRF hardcodeados"
fi

# Verificar configuraci√≥n de rate limiting para CSRF
log_info "Verificando rate limiting mejorado para CSRF..."

if grep -q "max.*3" "$EXPRESS_CSRF_FILE"; then
    log_success "Rate limiting m√°s estricto configurado para auth con CSRF"
else
    log_warning "Rate limiting podr√≠a necesitar ajuste para CSRF"
fi

# Test de funcionalidades b√°sicas
log_info "Verificando funcionalidades b√°sicas CSRF..."

BASIC_FUNCTIONS=(
    "token.*generation"
    "token.*validation"
    "token.*expiration"
    "session.*validation"
)

for func in "${BASIC_FUNCTIONS[@]}"; do
    if grep -qi "$func" "$CSRF_BACKEND_FILE"; then
        log_success "Funcionalidad b√°sica implementada: $func"
    else
        log_warning "Funcionalidad b√°sica podr√≠a necesitar verificaci√≥n: $func"
    fi
done

# Resumen de protecci√≥n CSRF
echo ""
echo "üìä RESUMEN DE VERIFICACI√ìN DE PROTECCI√ìN CSRF"
echo "============================================="
log_success "‚úÖ Archivos de protecci√≥n CSRF creados"
log_success "‚úÖ Funciones backend implementadas"
log_success "‚úÖ Middleware Express con CSRF configurado"
log_success "‚úÖ Hooks React para frontend creados"
log_success "‚úÖ Headers de seguridad CSRF configurados"
log_success "‚úÖ Endpoints CSRF protegidos"
log_success "‚úÖ Rate limiting mejorado"

echo ""
log_info "üîß FUNCIONALIDADES CSRF IMPLEMENTADAS:"
echo "‚Ä¢ Generaci√≥n autom√°tica de tokens CSRF"
echo "‚Ä¢ Validaci√≥n estricta en rutas cr√≠ticas"
echo "‚Ä¢ Protecci√≥n espec√≠fica para autenticaci√≥n"
echo "‚Ä¢ Hook React para frontend seguro"
echo "‚Ä¢ Headers personalizados anti-CSRF"
echo "‚Ä¢ Rate limiting m√°s estricto"
echo "‚Ä¢ Gesti√≥n autom√°tica de expiraci√≥n"

echo ""
log_info "üöÄ PR√ìXIMOS PASOS:"
echo "1. Integrar express-security-with-csrf.js en servicios Express"
echo "2. Usar useCSRF hook en componentes React"
echo "3. Configurar CSRFProvider en aplicaci√≥n principal"
echo "4. Probar endpoints con herramientas como Postman"
echo "5. Monitorear logs para intentos de CSRF"

echo ""
log_success "üéâ Verificaci√≥n de protecci√≥n CSRF completada exitosamente!"
echo ""
log_info "üí° NOTA: La protecci√≥n CSRF est√° configurada para:"
echo "   ‚Ä¢ Rutas POST, PUT, DELETE, PATCH"
echo "   ‚Ä¢ Endpoints de autenticaci√≥n (/api/auth/*)"
echo "   ‚Ä¢ Validaci√≥n de Origin headers"
echo "   ‚Ä¢ Tokens con expiraci√≥n de 1 hora"

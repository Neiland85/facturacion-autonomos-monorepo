name: üöÄ Vercel Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'

jobs:
  test-and-deploy:
    name: üß™ Test & Deploy to Vercel
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: ‚öôÔ∏è Enable Corepack
        run: |
          corepack enable
          corepack prepare pnpm@8.15.0 --activate

      - name: üåç Load Environment Variables
        run: |
          if [ "$GITHUB_REF" = "refs/heads/main" ]; then
            export ENVIRONMENT=production
          elif [ "$GITHUB_REF" = "refs/heads/develop" ]; then
            export ENVIRONMENT=staging
          else
            export ENVIRONMENT=development
          fi
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          source ./load-env.sh

      - name: üì¶ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üîç Type Check
        run: pnpm --filter @facturacion/web type-check

      - name: üßπ Lint Check
        run: pnpm --filter @facturacion/web lint

      - name: üß™ Run Tests
        run: pnpm --filter @facturacion/web test --passWithNoTests

      - name: üìä Generate Coverage
        run: pnpm --filter @facturacion/web test --coverage --passWithNoTests
        continue-on-error: true

      - name: üèóÔ∏è Build for Production
        run: pnpm --filter @facturacion/web build
        env:
          NODE_ENV: production

      - name: üöÄ Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          npm install -g vercel
          vercel --prod --yes
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_PROD }}
          REDIS_URL: ${{ secrets.REDIS_URL_PROD }}
          SMTP_HOST: ${{ secrets.SMTP_HOST_PROD }}
          SMTP_PORT: ${{ secrets.SMTP_PORT_PROD }}
          SMTP_USER: ${{ secrets.SMTP_USER_PROD }}
          SMTP_PASS: ${{ secrets.SMTP_PASS_PROD }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET_PROD }}
          NODE_ENV: ${{ secrets.NODE_ENV_PROD }}

      - name: üöÄ Deploy to Vercel (Staging)
        if: github.ref == 'refs/heads/develop'
        run: |
          npm install -g vercel
          vercel --yes
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_STAGING }}
          REDIS_URL: ${{ secrets.REDIS_URL_STAGING }}
          SMTP_HOST: ${{ secrets.SMTP_HOST_STAGING }}
          SMTP_PORT: ${{ secrets.SMTP_PORT_STAGING }}
          SMTP_USER: ${{ secrets.SMTP_USER_STAGING }}
          SMTP_PASS: ${{ secrets.SMTP_PASS_STAGING }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET_STAGING }}
          NODE_ENV: ${{ secrets.NODE_ENV_STAGING }}

      - name: üöÄ Deploy to Vercel (Development)
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop'
        run: |
          npm install -g vercel
          vercel --yes
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL_DEV }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_DEV }}
          REDIS_URL: ${{ secrets.REDIS_URL_DEV }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          NODE_ENV: ${{ secrets.NODE_ENV_DEV }}

  preview-deploy:
    name: üëÄ Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: ‚öôÔ∏è Enable Corepack
        run: |
          corepack enable
          corepack prepare pnpm@8.15.0 --activate

      - name: üì¶ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üèóÔ∏è Build Preview
        run: pnpm --filter @facturacion/web build
        env:
          NODE_ENV: production

      - name: üöÄ Deploy Preview to Vercel
        run: |
          npm install -g vercel
          vercel --yes
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL_DEV }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_DEV }}
          REDIS_URL: ${{ secrets.REDIS_URL_DEV }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          NODE_ENV: ${{ secrets.NODE_ENV_DEV }}

name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.0.0'
  PNPM_VERSION: '8.15.0'

jobs:
  quality:
    name: üîç Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter @facturacion/database prisma generate
      - run: pnpm type-check
      - run: pnpm lint

  test:
    name: üß™ Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter @facturacion/database prisma generate
      - run: pnpm test -- --coverage --watchAll=false
      - uses: codecov/codecov-action@v3
        if: github.ref == 'refs/heads/main'
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: success()

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter @facturacion/database prisma generate
      - run: pnpm build
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/*/dist/
            packages/*/dist/
          retention-days: 7

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      - run: echo "üöÄ Deploying to staging environment..."
      # TODO: Add actual deployment steps (Docker, Kubernetes, etc.)

  deploy-production:
    name: üéØ Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      - run: echo "üéØ Deploying to production environment..."
      # TODO: Add actual deployment steps (Docker, Kubernetes, etc.)

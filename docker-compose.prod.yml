services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: tributariapp-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-tributariapp}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
      POSTGRES_DB: ${POSTGRES_DB:-tributariapp}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tributariapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tributariapp}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: tributariapp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tributariapp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Invoice Service
  invoice-service:
    build:
      context: ./apps/invoice-service
      dockerfile: docker/Dockerfile
    container_name: tributariapp-invoice-service
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tributariapp-network
    restart: unless-stopped
    volumes:
      - ./logs/invoice-service:/usr/src/app/logs

  # Auth Service
  auth-service:
    build:
      context: ./apps/auth-service
      dockerfile: docker/Dockerfile
    container_name: tributariapp-auth-service
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=${REDIS_URL}
      - SESSION_SECRET=${SESSION_SECRET}
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tributariapp-network
    restart: unless-stopped
    volumes:
      - ./logs/auth-service:/usr/src/app/logs

  # Tax Calculator Service
  tax-calculator-service:
    build:
      context: ./apps/api-tax-calculator
      dockerfile: docker/Dockerfile
    container_name: tributariapp-tax-calculator
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - AEAT_API_KEY=${AEAT_API_KEY}
      - AEAT_BASE_URL=${AEAT_BASE_URL}
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tributariapp-network
    restart: unless-stopped
    volumes:
      - ./logs/tax-calculator:/usr/src/app/logs

  # API Gateway
  api-gateway:
    build:
      context: ./apps/api-gateway
      dockerfile: docker/Dockerfile
    container_name: tributariapp-api-gateway
    environment:
      - NODE_ENV=production
      - PORT=3001
      - INVOICE_SERVICE_URL=http://invoice-service:3002
      - AUTH_SERVICE_URL=http://auth-service:3003
      - TAX_CALCULATOR_URL=http://tax-calculator-service:3004
    ports:
      - "3001:3001"
    depends_on:
      - invoice-service
      - auth-service
      - tax-calculator-service
    networks:
      - tributariapp-network
    restart: unless-stopped
    volumes:
      - ./logs/api-gateway:/usr/src/app/logs

  # Web Application
  web:
    build:
      context: ./apps/web
      dockerfile: docker/Dockerfile
    container_name: tributariapp-web
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:3001
      - NEXT_PUBLIC_AUTH_SERVICE_URL=http://localhost:3003
      - NEXT_PUBLIC_INVOICE_SERVICE_URL=http://localhost:3002
      - NEXT_PUBLIC_TAX_CALCULATOR_URL=http://localhost:3004
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - tributariapp-network
    restart: unless-stopped
    volumes:
      - ./logs/web:/usr/src/app/logs

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: tributariapp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - tributariapp-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:

networks:
  tributariapp-network:
    driver: bridge

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: ${KUBE_NAMESPACE}
  labels:
    app: grafana
    environment: ${ENVIRONMENT}
data:
  grafana.ini: |
    [server]
    domain = grafana.${KUBE_DOMAIN}
    root_url = https://grafana.${KUBE_DOMAIN}
    serve_from_sub_path = true
    
    [security]
    admin_user = admin
    admin_password = ${GRAFANA_ADMIN_PASSWORD}
    
    [database]
    type = postgres
    host = postgres-service:5432
    name = grafana
    user = grafana
    password = ${GRAFANA_DB_PASSWORD}
    
    [auth]
    disable_login_form = false
    disable_signout_menu = false
    
    [auth.anonymous]
    enabled = false
    
    [analytics]
    reporting_enabled = false
    check_for_updates = false
    
    [log]
    mode = console
    level = info
    
    [metrics]
    enabled = true
    
    [alerting]
    enabled = true
    
  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
        jsonData:
          timeInterval: 15s
          httpMethod: GET
  
  dashboards.yml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
  
  facturacion-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Facturaci贸n Aut贸nomos - Monitoreo",
        "description": "Dashboard principal para monitorear la aplicaci贸n de facturaci贸n",
        "tags": ["facturacion", "api", "monitoring"],
        "timezone": "Europe/Madrid",
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s",
        "panels": [
          {
            "id": 1,
            "title": "Requests per Second",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total[5m])) by (service)",
                "legendFormat": "{{ service }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Response Time (95th percentile)",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le, service))",
                "legendFormat": "{{ service }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{status=~\"5..\"}[5m])) by (service) / sum(rate(http_requests_total[5m])) by (service)",
                "legendFormat": "{{ service }}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Database Connections",
            "type": "graph",
            "targets": [
              {
                "expr": "pg_stat_activity_count",
                "legendFormat": "Active connections"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ]
      }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: ${KUBE_NAMESPACE}
  labels:
    app: grafana
    environment: ${ENVIRONMENT}
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      name: grafana
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: ${KUBE_NAMESPACE}
  labels:
    app: grafana
    environment: ${ENVIRONMENT}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        environment: ${ENVIRONMENT}
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.0.0
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: facturacion-secret
                  key: GRAFANA_ADMIN_PASSWORD
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-dashboards
          configMap:
            name: grafana-config
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: ${KUBE_NAMESPACE}
  labels:
    app: grafana
    environment: ${ENVIRONMENT}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

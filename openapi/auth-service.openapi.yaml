openapi: 3.0.3
info:
  title: Auth Service API
  description: |
    Servicio de autenticaci√≥n y autorizaci√≥n para el sistema de facturaci√≥n

    ## Caracter√≠sticas principales:
    - Autenticaci√≥n JWT con refresh tokens
    - Registro de usuarios con validaci√≥n
    - Gesti√≥n de sesiones seguras
    - Integraci√≥n con 2FA (futuro)
    - Rate limiting y protecci√≥n DDoS

  version: 1.0.0
  contact:
    name: Equipo de Desarrollo
    email: dev@facturacion-autonomos.com

servers:
  - url: http://localhost:3003/api
    description: Auth Service - Desarrollo
  - url: https://auth.facturacion-autonomos.com/api
    description: Auth Service - Producci√≥n

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      summary: üìù Registrar nuevo usuario
      description: Crea una nueva cuenta de usuario con validaci√≥n completa
      tags: [üîê Autenticaci√≥n]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  description: Email √∫nico del usuario
                  example: 'usuario@ejemplo.com'
                password:
                  type: string
                  minLength: 8
                  description: Contrase√±a segura (m√≠nimo 8 caracteres)
                  example: 'password123'
                name:
                  type: string
                  minLength: 2
                  description: Nombre completo del usuario
                  example: 'Juan P√©rez'
                phone:
                  type: string
                  description: Tel√©fono opcional
                  example: '+34612345678'
      responses:
        201:
          description: ‚úÖ Usuario registrado exitosamente
          headers:
            Set-Cookie:
              description: Cookie de sesi√≥n segura
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      tokens:
                        $ref: '#/components/schemas/AuthTokens'
                  message:
                    type: string
                    example: 'Usuario registrado exitosamente'
        400:
          $ref: '#/components/responses/ValidationError'
        409:
          description: ‚ö†Ô∏è Usuario ya existe
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: 'USER_EXISTS'
                      message:
                        type: string
                        example: 'Ya existe un usuario con este email'

  /auth/login:
    post:
      summary: üîë Iniciar sesi√≥n
      description: Autentica al usuario y devuelve tokens de acceso
      tags: [üîê Autenticaci√≥n]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: 'usuario@ejemplo.com'
                password:
                  type: string
                  example: 'password123'
      responses:
        200:
          description: ‚úÖ Login exitoso
          headers:
            Set-Cookie:
              description: Cookie de sesi√≥n con refresh token
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      tokens:
                        $ref: '#/components/schemas/AuthTokens'
                  message:
                    type: string
                    example: 'Login exitoso'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        429:
          description: üö´ Demasiados intentos
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      code:
                        type: string
                        example: 'TOO_MANY_REQUESTS'
                      message:
                        type: string
                        example: 'Demasiados intentos de login. Intente m√°s tarde'

  /auth/refresh:
    post:
      summary: üîÑ Refrescar token
      description: Obtiene un nuevo token de acceso usando el refresh token
      tags: [üîê Autenticaci√≥n]
      security:
        - bearerAuth: []
      responses:
        200:
          description: ‚úÖ Token refrescado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      tokens:
                        $ref: '#/components/schemas/AuthTokens'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /auth/logout:
    post:
      summary: üö™ Cerrar sesi√≥n
      description: Invalida la sesi√≥n actual del usuario
      tags: [üîê Autenticaci√≥n]
      security:
        - bearerAuth: []
      responses:
        200:
          description: ‚úÖ Sesi√≥n cerrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Sesi√≥n cerrada exitosamente'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /auth/me:
    get:
      summary: üë§ Informaci√≥n del usuario actual
      description: Obtiene la informaci√≥n del usuario autenticado
      tags: [üîê Autenticaci√≥n]
      security:
        - bearerAuth: []
      responses:
        200:
          description: ‚úÖ Informaci√≥n del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '123e4567-e89b-12d3-a456-426614174000'
        email:
          type: string
          format: email
          example: 'usuario@ejemplo.com'
        name:
          type: string
          example: 'Juan P√©rez'
        phone:
          type: string
          example: '+34612345678'
        role:
          type: string
          enum: [user, admin]
          example: 'user'
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: '2024-01-15T10:30:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-01-15T10:30:00Z'

    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
          description: Token JWT para acceso a recursos
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        refreshToken:
          type: string
          description: Token para refrescar el access token
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        expiresIn:
          type: integer
          description: Segundos hasta expiraci√≥n del access token
          example: 3600
        tokenType:
          type: string
          example: 'Bearer'

  responses:
    UnauthorizedError:
      description: No autorizado - Credenciales inv√°lidas
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: 'INVALID_CREDENTIALS'
                  message:
                    type: string
                    example: 'Email o contrase√±a incorrectos'

    ValidationError:
      description: Datos de entrada inv√°lidos
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              error:
                type: object
                properties:
                  code:
                    type: string
                    example: 'VALIDATION_ERROR'
                  message:
                    type: string
                    example: 'Los datos proporcionados no son v√°lidos'
                  details:
                    type: object
                    additionalProperties:
                      type: string

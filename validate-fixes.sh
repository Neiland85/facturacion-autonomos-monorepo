#!/bin/bash

# Script de Validaci√≥n Final - Correcciones Cr√≠ticas
# Sistema de Facturaci√≥n para Aut√≥nomos

set -e

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîç VALIDACI√ìN FINAL - CORRECCIONES CR√çTICAS${NC}"
echo -e "${BLUE}=============================================${NC}"
echo ""

# 1. Verificar TypeScript
echo -e "${YELLOW}1. Verificando configuraci√≥n TypeScript...${NC}"
if grep -q '"strictNullChecks": true' tsconfig.base.json; then
    echo -e "${GREEN}‚úÖ strictNullChecks habilitado${NC}"
else
    echo -e "${RED}‚ùå strictNullChecks no encontrado${NC}"
fi

if grep -q '"module": "ESNext"' apps/*/tsconfig.json; then
    echo -e "${GREEN}‚úÖ M√≥dulos ESNext configurados${NC}"
else
    echo -e "${RED}‚ùå M√≥dulos no actualizados${NC}"
fi

# 2. Verificar Prisma
echo -e "${YELLOW}2. Verificando Prisma Client...${NC}"
if [ -d "packages/database/src/generated" ]; then
    echo -e "${GREEN}‚úÖ Prisma Client generado${NC}"
    echo "   Archivos generados: $(ls packages/database/src/generated/*.d.ts | wc -l)"
else
    echo -e "${RED}‚ùå Prisma Client no generado${NC}"
fi

# 3. Verificar gesti√≥n de dependencias
echo -e "${YELLOW}3. Verificando gesti√≥n de dependencias...${NC}"
if [ -f "pnpm-lock.yaml" ] && [ ! -f "yarn.lock" ] && [ ! -f "package-lock.json" ]; then
    echo -e "${GREEN}‚úÖ pnpm unificado${NC}"
else
    echo -e "${RED}‚ùå Archivos de lock conflictivos encontrados${NC}"
fi

# 4. Verificar ESLint
echo -e "${YELLOW}4. Verificando configuraci√≥n ESLint...${NC}"
if [ -f "eslint.config.mjs" ]; then
    echo -e "${GREEN}‚úÖ ESLint configurado${NC}"
    if grep -q "prefer-nullish-coalescing" eslint.config.mjs; then
        echo -e "${GREEN}‚úÖ Reglas de nullish coalescing configuradas${NC}"
    fi
else
    echo -e "${RED}‚ùå ESLint no configurado${NC}"
fi

# 5. Verificar packageManager
echo -e "${YELLOW}5. Verificando packageManager...${NC}"
if grep -q '"packageManager": "pnpm' package.json; then
    echo -e "${GREEN}‚úÖ pnpm configurado como packageManager${NC}"
else
    echo -e "${RED}‚ùå packageManager no actualizado${NC}"
fi

# 6. Verificar builds
echo -e "${YELLOW}6. Verificando capacidad de build...${NC}"
echo "   Intentando type-check..."
if pnpm type-check > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ TypeScript type-check exitoso${NC}"
else
    echo -e "${RED}‚ùå Errores de TypeScript encontrados${NC}"
fi

echo ""
echo -e "${BLUE}üìä RESUMEN DE VALIDACI√ìN${NC}"
echo -e "${BLUE}========================${NC}"

# Contar errores
ERRORS=$(grep -c "‚ùå" /tmp/validation_output 2>/dev/null || echo "0")

if [ "$ERRORS" -eq "0" ]; then
    echo -e "${GREEN}üéâ ¬°Todas las correcciones cr√≠ticas aplicadas exitosamente!${NC}"
    echo ""
    echo -e "${YELLOW}Pr√≥ximos pasos recomendados:${NC}"
    echo "  1. make audit-all          # Ejecutar auditor√≠a completa"
    echo "  2. make test               # Implementar tests b√°sicos"
    echo "  3. make build              # Verificar builds"
    echo "  4. make dev                # Iniciar desarrollo"
else
    echo -e "${RED}‚ö†Ô∏è  Se encontraron $ERRORS problemas que requieren atenci√≥n${NC}"
    echo ""
    echo -e "${YELLOW}Ejecutar correcciones:${NC}"
    echo "  make fix-config            # Aplicar todas las correcciones"
fi

echo ""
echo -e "${BLUE}üìà Dashboard de m√©tricas: dashboard/index.html${NC}"
echo -e "${BLUE}üìã Informe t√©cnico: INFORME_TECNICO_FASE_FINAL.md${NC}"
